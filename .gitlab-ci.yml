default:
  image: registry.gitlab.com/gitlab-org/terraform-images/releases/terraform:1.5.5

workflow:
  rules:
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
      variables:
        ENVIRONMENT: production
        DOMAIN: example.com
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        ENVIRONMENT: stage
        DOMAIN: example.dev
    - if: $CI_MERGE_REQUEST_ID
      variables:
        ENVIRONMENT: review/$CI_MERGE_REQUEST_ID
        DOMAIN: example.dev

variables:
  TF_ROOT: ${CI_PROJECT_DIR}/terraform
  TF_STATE_NAME: ${ENVIRONMENT}
  TF_CLI_ARGS_plan: -var-file=${ENVIRONMENT}.tfvars
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

cache:
  key: ${TF_STATE_NAME}
  paths:
    - ${TF_ROOT}/.terraform

before_script:
  - cd ${TF_ROOT}

stages:
  - build
  - test
  - prepare
  - validate
  - plan
  - deploy

build:
  stage: build
  image: docker:24.0.7-cli
  services:
    - name: docker:24.0.7-dind
      alias: docker
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA" ${CI_PROJECT_DIR}/dockerfiles/demo
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
  after_script:
    - docker logout $CI_REGISTRY

test:
  stage: test
  image: docker:24.0.7-cli
  services:
    - name: docker:24.0.7-dind
      alias: docker
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    - docker run "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA" php bin/phpunit
  after_script:
    - docker logout $CI_REGISTRY
  allow_failure: true

init:
  stage: prepare
  script:
    - gitlab-terraform init

validate:
  stage: validate
  script:
    - gitlab-terraform validate

plan:
  stage: plan
  variables:
    TF_VAR_kubernetes_namespace: $CI_ENVIRONMENT_SLUG
    TF_VAR_image_repository: $CI_REGISTRY_IMAGE
    TF_VAR_image_tag: $CI_COMMIT_SHA
  environment:
    action: prepare
    name: $ENVIRONMENT
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  rules:
    - if: $ENVIRONMENT =~ /^review\//
      variables:
        TF_VAR_host: $CI_ENVIRONMENT_SLUG.$DOMAIN
    - if: $ENVIRONMENT == "stage"
      variables:
        TF_VAR_host: $CI_ENVIRONMENT_SLUG.$DOMAIN
    - if: $ENVIRONMENT == "production"
      variables:
        TF_VAR_host: $DOMAIN
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

apply_review:
  stage: deploy
  environment:
    action: start
    on_stop: destroy_review
    auto_stop_in: 1 week
    name: $ENVIRONMENT
    url: https://$CI_ENVIRONMENT_SLUG.$DOMAIN
  script:
    - gitlab-terraform apply
  dependencies:
    - plan
  rules:
    - if: $ENVIRONMENT =~ /^review\//

apply_stage:
  stage: deploy
  environment:
    action: start
    name: $ENVIRONMENT
    url: https://$CI_ENVIRONMENT_SLUG.$DOMAIN
  script:
    - gitlab-terraform apply
  dependencies:
    - plan
  rules:
    - if: $ENVIRONMENT == "stage"

apply_production:
  stage: deploy
  environment:
    action: start
    name: $ENVIRONMENT
    url: https://$DOMAIN
  script:
    - gitlab-terraform apply
  dependencies:
    - plan
  rules:
    - if: $ENVIRONMENT == "production"
      when: manual

destroy_review:
  stage: deploy
  script:
    - gitlab-terraform destroy
  environment:
    name: $ENVIRONMENT
    action: stop
  rules:
    - if: $ENVIRONMENT =~ /^review\//
      when: manual
